name: IPTV Processor CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      force_refresh:
        description: 'Force refresh all sources'
        required: false
        default: 'false'

env:
  OUTPUT_DIR: './output'
  CACHE_KEY: 'iptv-${{ github.sha }}'
  MAX_RETRIES: 3

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      valid: ${{ steps.check.outputs.result }}
    steps:
    - uses: actions/checkout@v4
    - name: Validate template
      id: check
      run: |
        if [ -f demo.txt ] && [ -s demo.txt ]; then
          echo "result=true" >> $GITHUB_OUTPUT
        else
          echo "::error::Missing demo.txt"
          echo "result=false" >> $GITHUB_OUTPUT
        fi

  process-iptv:
    needs: validate-inputs
    if: needs.validate-inputs.outputs.valid == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Cache FFmpeg
      uses: actions/cache@v3
      with:
        path: /usr/bin/ffmpeg
        key: ${{ runner.os }}-ffmpeg
        
    - name: Install dependencies
      run: |
        sudo apt-get install -y ffmpeg
        pip install -r requirements.txt
        
    - name: Check cache
      id: cache-check
      run: |
        if [[ "${{ github.event.inputs.force_refresh }}" == "true" ]]; then
          echo "cache_key=force-refresh-${{ github.run_id }}" >> $GITHUB_OUTPUT
        else
          echo "cache_key=${{ env.CACHE_KEY }}" >> $GITHUB_OUTPUT
        fi
        
    - uses: actions/cache@v3
      if: steps.cache-check.outputs.cache_key
      with:
        path: ${{ env.OUTPUT_DIR }}
        key: ${{ steps.cache-check.outputs.cache_key }}
        
    - name: Run processor
      id: processor
      continue-on-error: true
      run: |
        for i in $(seq 1 $MAX_RETRIES); do
          python iptv_processor.py \
            --output-dir $OUTPUT_DIR \
            --max-threads ${{ env.MAX_THREADS || 8 }} \
            --timeout ${{ env.TIMEOUT || 10 }} 2>&1 | grep -vE 'token|password'
            
          if [ $? -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            break
          fi
          sleep $((i * 5))
        done
        
        if [ $? -ne 0 ]; then
          echo "::error::Max retries exceeded"
          exit 1
        fi
        
    - name: Validate outputs
      if: steps.processor.outputs.status == 'success'
      run: |
        # 完整验证逻辑见上文改进建议
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: iptv-${{ github.run_id }}
        path: $OUTPUT_DIR/*
        retention-days: 3
        
    - name: Notify status
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          // 通知逻辑保持不变

name: Update IPTV

on:
  schedule:
    # 每天5点、12点、17点（UTC时间）运行，对应北京时间13点、20点、次日1点
    - cron: '0 5,12,17 * * *'
  workflow_dispatch:  # 允许手动触发
    inputs:
      skip_test:
        description: '跳过测速步骤（仅更新源）'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  MAX_RETRY_COUNT: 3
  TIMEOUT_SECONDS: '30'

jobs:
  update-iptv:
    name: Update IPTV Sources
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      id: install-deps
      run: |
        echo "开始安装Python依赖..."
        python -m pip install --upgrade pip
        pip install requests pandas pyyaml
        echo "依赖安装完成"
        echo "Python版本: $(python --version)"
        echo "Pip版本: $(pip --version)"
        
    - name: Create template file if not exists
      id: create-template
      run: |
        echo "检查模板文件..."
        if [ ! -f "demo.txt" ]; then
          echo "创建默认 demo.txt 模板..."
          cat << 'EOF' > demo.txt
          CCTV1
          CCTV2
          CCTV5
          CCTV5+
          CCTV6
          CCTV8
          湖南卫视
          浙江卫视
          江苏卫视
          东方卫视
          北京卫视
          安徽卫视
          EOF
          echo "模板文件创建完成"
        else
          echo "demo.txt 已存在，跳过创建"
          echo "当前模板内容:"
          head -10 demo.txt
        fi
        
    - name: Setup environment variables
      id: setup-env
      run: |
        echo "设置环境变量..."
        # 处理手动触发参数
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          if [ "${{ inputs.skip_test }}" = "true" ]; then
            echo "SKIP_SPEED_TEST=true" >> $GITHUB_ENV
            echo "设置为跳过测速模式"
          else
            echo "SKIP_SPEED_TEST=false" >> $GITHUB_ENV
            echo "设置为完整测速模式"
          fi
        else
          echo "SKIP_SPEED_TEST=false" >> $GITHUB_ENV
          echo "定时任务，使用完整测速模式"
        fi
        
        echo "环境变量设置完成:"
        echo "SKIP_SPEED_TEST=$SKIP_SPEED_TEST"
        
    - name: Run IPTV update script
      id: run-script
      env:
        SKIP_SPEED_TEST: ${{ env.SKIP_SPEED_TEST }}
        TIMEOUT_SECONDS: ${{ env.TIMEOUT_SECONDS }}
      run: |
        echo "开始 IPTV 更新流程..."
        echo "当前时间: $(date)"
        echo "跳过测速: $SKIP_SPEED_TEST"
        echo "超时设置: $TIMEOUT_SECONDS 秒"
        
        # 检查脚本是否存在
        if [ ! -f "iptv.py" ]; then
          echo "❌ 错误: iptv.py 脚本不存在"
          echo "当前目录文件:"
          ls -la
          exit 1
        fi
        
        echo "Python脚本检查..."
        python -c "import requests, pandas; print('✅ 依赖库导入成功')"
        
        # 执行更新脚本
        echo "开始执行更新脚本..."
        start_time=$(date +%s)
        
        if python iptv.py; then
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "✅ IPTV 更新脚本执行成功"
          echo "执行时间: ${duration} 秒"
          echo "result=success" >> $GITHUB_OUTPUT
        else
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "❌ IPTV 更新脚本执行失败"
          echo "执行时间: ${duration} 秒"
          echo "result=failure" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Verify generated files
      id: verify-files
      run: |
        echo "检查生成的文件..."
        files=("iptv.txt" "iptv.m3u" "iptv_data.json" "speed_report.txt" "process.log")
        missing_files=()
        
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            if [ -s "$file" ]; then
              line_count=$(wc -l < "$file" 2>/dev/null || echo "0")
              file_size=$(wc -c < "$file" 2>/dev/null || echo "0")
              echo "✅ $file 存在 - $line_count 行, ${file_size} 字节"
            else
              echo "⚠️  $file 存在但为空"
              missing_files+=("$file(空)")
            fi
          else
            echo "❌ $file 不存在"
            missing_files+=("$file")
          fi
        done
        
        # 如果有文件缺失，但不阻止流程继续
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "警告: 以下文件缺失或为空: ${missing_files[*]}"
          echo "files_missing=true" >> $GITHUB_OUTPUT
        else
          echo "files_missing=false" >> $GITHUB_OUTPUT
        fi
        
        # 关键文件检查
        if [ ! -f "iptv.txt" ] || [ ! -s "iptv.txt" ]; then
          echo "❌ 关键文件 iptv.txt 缺失或为空，流程失败"
          exit 1
        fi
        
    - name: Generate file statistics
      id: file-stats
      run: |
        echo "生成文件统计信息..."
        
        # 获取文件统计，处理可能的空文件
        TXT_LINES=$(wc -l < iptv.txt 2>/dev/null || echo "0")
        M3U_LINES=$(wc -l < iptv.m3u 2>/dev/null || echo "0")
        JSON_SIZE=$(wc -c < iptv_data.json 2>/dev/null || echo "0")
        SPEED_LINES=$(wc -l < speed_report.txt 2>/dev/null || echo "0")
        
        echo "TXT_LINES=$TXT_LINES" >> $GITHUB_OUTPUT
        echo "M3U_LINES=$M3U_LINES" >> $GITHUB_OUTPUT
        echo "JSON_SIZE=$JSON_SIZE" >> $GITHUB_OUTPUT
        echo "SPEED_LINES=$SPEED_LINES" >> $GITHUB_OUTPUT
        
        echo "📊 文件统计:"
        echo "  iptv.txt: $TXT_LINES 行"
        echo "  iptv.m3u: $M3U_LINES 行" 
        echo "  iptv_data.json: $JSON_SIZE 字节"
        echo "  speed_report.txt: $SPEED_LINES 行"
        
    - name: Update documentation
      id: update-docs
      run: |
        echo "更新文档..."
        DATE=$(date '+%Y-%m-%d %H:%M:%S')
        REPO_OWNER="${{ github.repository_owner }}"
        REPO_NAME="${{ github.event.repository.name }}"
        
        # 使用上一步的统计信息
        TXT_LINES="${{ steps.file-stats.outputs.TXT_LINES }}"
        M3U_LINES="${{ steps.file-stats.outputs.M3U_LINES }}"
        JSON_SIZE="${{ steps.file-stats.outputs.JSON_SIZE }}"
        
        # 创建详细的README
        cat << EOF > README.md
# 📺 IPTV直播源自动更新仓库

## 📢 免责声明
1. 本仓库仅供学习使用，请尊重版权，请勿利用此仓库从事商业行为及非法用途!
2. 使用本仓库的过程中可能会产生版权数据。对于这些版权数据，本仓库不拥有它们的所有权。为了避免侵权，使用者务必在 24 小时内清除使用本仓库的过程中所产生的版权数据。
3. 由于使用本仓库产生的包括由于本协议或由于使用或无法使用本仓库而引起的任何性质的任何直接、间接、特殊、偶然或结果性损害由使用者负责。
4. 禁止在违反当地法律法规的情况下使用本仓库。对于使用者在明知或不知当地法律法规不允许的情况下使用本仓库所造成的任何违法违规行为由使用者承担。
5. 如果官方平台觉得本仓库不妥，可联系本仓库更改或移除。

## 📊 最近更新
**最后更新时间**: $DATE  
**频道数量**: $TXT_LINES 个频道  
**播放列表大小**: $M3U_LINES 行  
**数据文件**: $JSON_SIZE 字节  
**更新方式**: ${{ github.event_name == 'workflow_dispatch' && '手动触发' || '自动定时' }}

## 📥 下载链接
- [IPTV文本格式 (TXT)](./iptv.txt) - $TXT_LINES 个频道
- [IPTV M3U播放列表](./iptv.m3u) - $M3U_LINES 行
- [IPTV JSON数据](./iptv_data.json) - $JSON_SIZE 字节
- [测速报告](./speed_report.txt)

## 🛠️ 使用说明
将上述链接添加到您的IPTV播放器中使用：

### 文本格式 (TXT)
- 适用于支持文本格式的播放器
- 格式：频道名称,URL

### M3U格式
- 适用于大多数IPTV播放器
- 包含频道分组和速度信息

## ⚡ 自动更新
此仓库通过GitHub Actions自动更新：
- **更新时间**: 每天UTC时间 5:00, 12:00, 17:00 (北京时间 13:00, 20:00, 次日1:00)
- **更新内容**: 自动抓取、测速、筛选最优直播源
- **质量保证**: 只保留速度 > 500KB/s 的优质源

## 📁 文件说明
- \`iptv.txt\` - 文本格式直播源，按频道分类 ($TXT_LINES 个频道)
- \`iptv.m3u\` - M3U播放列表格式 ($M3U_LINES 行)
- \`iptv_data.json\` - 完整的频道数据（JSON格式, $JSON_SIZE 字节）
- \`speed_report.txt\` - 详细的测速报告和统计信息
- \`process.log\` - 处理日志
- \`demo.txt\` - 频道模板文件

## 🔧 本地运行
如需本地运行更新脚本：
\`\`\`bash
git clone https://github.com/$REPO_OWNER/$REPO_NAME.git
cd $REPO_NAME
pip install requests pandas
python iptv.py
\`\`\`

## ⭐ 支持
如果这个项目对您有帮助，请给个Star！这是对我们最大的鼓励！

---
*自动更新于: $DATE*  
*工作流运行: [#${{ github.run_number }}](https://github.com/$REPO_OWNER/$REPO_NAME/actions/runs/${{ github.run_id }})*
EOF
        
        echo "📝 README.md 文档已更新"
        
    - name: Check for changes
      id: check_changes
      run: |
        echo "检查文件变更..."
        git add -A
        
        # 检查是否有变更
        if git diff --staged --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "✅ 未检测到文件变更"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "📋 检测到文件变更:"
          git diff --staged --name-only
          echo "变更详情:"
          git diff --staged --stat
        fi
        
    - name: Pull latest changes before push
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        echo "🔄 推送前拉取最新更改..."
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git pull origin main --rebase --allow-unrelated-histories || echo "拉取失败，继续执行"
        echo "拉取完成"
        
    - name: Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        echo "📤 提交并推送更改..."
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        COMMIT_MSG="🔄 Auto-update IPTV sources - $(date +'%Y-%m-%d %H:%M:%S')
        
        自动更新直播源文件
        - 频道数量: ${{ steps.file-stats.outputs.TXT_LINES }}
        - 播放列表: ${{ steps.file-stats.outputs.M3U_LINES }} 行
        - 数据文件: ${{ steps.file-stats.outputs.JSON_SIZE }} 字节
        - 测速报告: ${{ steps.file-stats.outputs.SPEED_LINES }} 行
        
        工作流运行: #${{ github.run_number }}"
        
        git commit -m "$COMMIT_MSG"
        
        # 重试推送机制
        for i in $(seq 1 ${{ env.MAX_RETRY_COUNT }}); do
          echo "尝试推送 (第 $i 次)..."
          if git push origin main; then
            echo "✅ 推送成功"
            break
          else
            if [ $i -eq ${{ env.MAX_RETRY_COUNT }} ]; then
              echo "❌ 推送失败，已达到最大重试次数"
              exit 1
            else
              echo "⚠️  推送失败，等待10秒后重试..."
              sleep 10
              git pull origin main --rebase --allow-unrelated-histories
            fi
          fi
        done
        
    - name: Upload generated files as artifact
      uses: actions/upload-artifact@v4
      with:
        name: iptv-sources-${{ github.run_number }}
        path: |
          iptv.txt
          iptv.m3u
          iptv_data.json
          speed_report.txt
          process.log
          README.md
        retention-days: 7
        if-no-files-found: warn
        
    - name: Success notification
      if: success()
      run: |
        echo "🎉 IPTV 更新完成！"
        echo "📊 最终文件统计:"
        echo "   - iptv.txt: ${{ steps.file-stats.outputs.TXT_LINES }} 行"
        echo "   - iptv.m3u: ${{ steps.file-stats.outputs.M3U_LINES }} 行"
        echo "   - iptv_data.json: ${{ steps.file-stats.outputs.JSON_SIZE }} 字节"
        echo "   - speed_report.txt: ${{ steps.file-stats.outputs.SPEED_LINES }} 行"
        echo "📝 变更状态: ${{ steps.check_changes.outputs.changes == 'true' && '已提交' || '无变更' }}"
        echo "✅ 所有步骤完成 - 运行编号: #${{ github.run_number }}"
        
    - name: Failure notification
      if: failure()
      run: |
        echo "❌ IPTV 更新失败！"
        echo "失败时间: $(date)"
        echo "运行编号: #${{ github.run_number }}"
        echo "请检查工作流日志获取详细信息"
        echo "失败步骤: ${{ steps.*.outcome }}"
        exit 1

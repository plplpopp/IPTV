name: Update IPTV

on:
  schedule:
    - cron: '0 5,12,17 * * *'  # ÊØèÂ§© UTC Êó∂Èó¥ 05:00, 12:00, 17:00 ÊâßË°å
  workflow_dispatch:
  push:
    paths:
      - 'iptv.py'
      - 'requirements.txt'

permissions:
  contents: write

env:
  TZ: Asia/Shanghai
  PYTHON_VERSION: '3.10'

jobs:
  update-iptv:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup timezone
      uses: zcong1993/setup-timezone@master
      with:
        timezone: Asia/Shanghai

    - name: Get current time
      id: time
      uses: josStorer/get-current-time@v2.0.2
      with:
        format: 'YYYY-MM-DD HH:mm:ss'
        utcOffset: '+08:00'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run IPTV update script
      id: run-script
      run: |
        echo "Running IPTV update script..."
        python iptv.py
        
        # Check if files were created
        if [ ! -f "iptv.txt" ] || [ ! -f "iptv.m3u" ]; then
          echo "Error: IPTV files were not generated"
          exit 1
        fi
        
        # Count lines in generated files
        LINES_TXT=$(wc -l < iptv.txt || echo "0")
        LINES_M3U=$(wc -l < iptv.m3u || echo "0")
        echo "lines_txt=$LINES_TXT" >> $GITHUB_OUTPUT
        echo "lines_m3u=$LINES_M3U" >> $GITHUB_OUTPUT

    - name: Validate generated files
      run: |
        echo "Validating generated files..."
        if [ -s "iptv.txt" ]; then
          echo "‚úì iptv.txt is not empty"
        else
          echo "‚úó iptv.txt is empty"
          exit 1
        fi
        
        if [ -s "iptv.m3u" ]; then
          echo "‚úì iptv.m3u is not empty"
        else
          echo "‚úó iptv.m3u is empty"
          exit 1
        fi

    - name: Update README
      run: |
        cat > README.md << 'EOF'
# IPTV Áõ¥Êí≠Ê∫ê‰ªìÂ∫ì

## üì¢ ÂÖçË¥£Â£∞Êòé

1. Êú¨‰ªìÂ∫ì‰ªÖ‰æõÂ≠¶‰π†‰ΩøÁî®ÔºåËØ∑Â∞äÈáçÁâàÊùÉÔºåËØ∑ÂãøÂà©Áî®Ê≠§‰ªìÂ∫ì‰ªé‰∫ãÂïÜ‰∏öË°å‰∏∫ÂèäÈùûÊ≥ïÁî®ÈÄî!

2. ‰ΩøÁî®Êú¨‰ªìÂ∫ìÁöÑËøáÁ®ã‰∏≠ÂèØËÉΩ‰ºö‰∫ßÁîüÁâàÊùÉÊï∞ÊçÆ„ÄÇÂØπ‰∫éËøô‰∫õÁâàÊùÉÊï∞ÊçÆÔºåÊú¨‰ªìÂ∫ì‰∏çÊã•ÊúâÂÆÉ‰ª¨ÁöÑÊâÄÊúâÊùÉ„ÄÇ‰∏∫‰∫ÜÈÅøÂÖç‰æµÊùÉÔºå‰ΩøÁî®ËÄÖÂä°ÂøÖÂú® 24 Â∞èÊó∂ÂÜÖÊ∏ÖÈô§‰ΩøÁî®Êú¨‰ªìÂ∫ìÁöÑËøáÁ®ã‰∏≠ÊâÄ‰∫ßÁîüÁöÑÁâàÊùÉÊï∞ÊçÆ„ÄÇ

3. Áî±‰∫é‰ΩøÁî®Êú¨‰ªìÂ∫ì‰∫ßÁîüÁöÑÂåÖÊã¨Áî±‰∫éÊú¨ÂçèËÆÆÊàñÁî±‰∫é‰ΩøÁî®ÊàñÊó†Ê≥ï‰ΩøÁî®Êú¨‰ªìÂ∫ìËÄåÂºïËµ∑ÁöÑ‰ªª‰ΩïÊÄßË¥®ÁöÑ‰ªª‰ΩïÁõ¥Êé•„ÄÅÈó¥Êé•„ÄÅÁâπÊÆä„ÄÅÂÅ∂ÁÑ∂ÊàñÁªìÊûúÊÄßÊçüÂÆ≥Áî±‰ΩøÁî®ËÄÖË¥üË¥£„ÄÇ

4. Á¶ÅÊ≠¢Âú®ËøùÂèçÂΩìÂú∞Ê≥ïÂæãÊ≥ïËßÑÁöÑÊÉÖÂÜµ‰∏ã‰ΩøÁî®Êú¨‰ªìÂ∫ì„ÄÇÂØπ‰∫é‰ΩøÁî®ËÄÖÂú®ÊòéÁü•Êàñ‰∏çÁü•ÂΩìÂú∞Ê≥ïÂæãÊ≥ïËßÑ‰∏çÂÖÅËÆ∏ÁöÑÊÉÖÂÜµ‰∏ã‰ΩøÁî®Êú¨‰ªìÂ∫ìÊâÄÈÄ†ÊàêÁöÑ‰ªª‰ΩïËøùÊ≥ïËøùËßÑË°å‰∏∫Áî±‰ΩøÁî®ËÄÖÊâøÊãÖ„ÄÇ

5. Â¶ÇÊûúÂÆòÊñπÂπ≥Âè∞ËßâÂæóÊú¨‰ªìÂ∫ì‰∏çÂ¶•ÔºåÂèØËÅîÁ≥ªÊú¨‰ªìÂ∫ìÊõ¥ÊîπÊàñÁßªÈô§„ÄÇ

## üìä ‰ªìÂ∫ìÁä∂ÊÄÅ

- **ÊúÄÂêéÊõ¥Êñ∞**: ${{ steps.time.outputs.formattedTime }} (Âåó‰∫¨Êó∂Èó¥)
- **Áõ¥Êí≠Ê∫êÊï∞Èáè**: 
  - iptv.txt: ${{ steps.run-script.outputs.lines_txt }} Ë°å
  - iptv.m3u: ${{ steps.run-script.outputs.lines_m3u }} Ë°å

## üì• ‰∏ãËΩΩÈìæÊé•

### Áõ¥Èìæ‰∏ãËΩΩ
- [iptv.txt](https://ghfast.top/raw.githubusercontent.com/${{ github.repository }}/refs/heads/main/iptv.txt)
- [iptv.m3u](https://ghfast.top/raw.githubusercontent.com/${{ github.repository }}/refs/heads/main/iptv.m3u)

### GitHub Raw ÈìæÊé•
- [iptv.txt](https://raw.githubusercontent.com/${{ github.repository }}/main/iptv.txt)
- [iptv.m3u](https://raw.githubusercontent.com/${{ github.repository }}/main/iptv.m3u)

## ‚ö° ‰ΩøÁî®ËØ¥Êòé

1. **Êí≠ÊîæÂô®‰ΩøÁî®**: Â∞Ü‰∏äËø∞ÈìæÊé•Â§çÂà∂Âà∞ÊîØÊåÅ M3U Ê†ºÂºèÁöÑÊí≠ÊîæÂô®‰∏≠‰ΩøÁî®
2. **ÊñáÊú¨Ê†ºÂºè**: iptv.txt ‰∏∫Á∫ØÊñáÊú¨Ê†ºÂºèÔºåÊØèË°å‰∏Ä‰∏™È¢ëÈÅìÈìæÊé•
3. **M3U Ê†ºÂºè**: iptv.m3u ‰∏∫Ê†áÂáÜ M3U Êí≠ÊîæÂàóË°®Ê†ºÂºè

## üîÑ Ëá™Âä®Êõ¥Êñ∞

Êú¨‰ªìÂ∫ìÊØèÂ§©Ëá™Âä®Êõ¥Êñ∞‰∏âÊ¨°ÔºàÂåó‰∫¨Êó∂Èó¥ 13:00, 20:00, Ê¨°Êó• 01:00Ôºâ

## ‚≠ê ÊîØÊåÅÈ°πÁõÆ

Â¶ÇÊûúËøô‰∏™È°πÁõÆÂØπÊÇ®ÊúâÂ∏ÆÂä©ÔºåËØ∑Áªô‰∏™ Star ÊîØÊåÅ‰∏Ä‰∏ãÔºÅ

---
*Êõ¥Êñ∞Êó∂Èó¥: ${{ steps.time.outputs.formattedTime }}*
EOF

    - name: Show workspace files
      run: |
        echo "Workspace files:"
        ls -la
        echo -e "\nFile sizes:"
        du -h iptv.txt iptv.m3u README.md

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Check for changes
      id: git-check
      run: |
        git add iptv.txt iptv.m3u README.md
        if git diff --staged --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No changes to commit"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected, preparing commit"
        fi

    - name: Commit and push changes
      if: steps.git-check.outputs.changes == 'true'
      run: |
        git commit -m "üîÑ Auto-update IPTV sources at ${{ steps.time.outputs.formattedTime }}
        
        - Updated IPTV sources
        - iptv.txt: ${{ steps.run-script.outputs.lines_txt }} lines
        - iptv.m3u: ${{ steps.run-script.outputs.lines_m3u }} lines"
        git push origin main

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: iptv-sources
        path: |
          iptv.txt
          iptv.m3u
        retention-days: 7

    - name: No changes notification
      if: steps.git-check.outputs.changes == 'false'
      run: |
        echo "‚úÖ No changes detected, workflow completed without commit"
